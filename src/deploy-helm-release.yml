name: deploy

concurrency:
  group: ${{ github.event_name }}

on:
  push:
    branches:
      - master
      - main
      - legacy/*
    paths-ignore:
      - manifest.yaml
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      - master
      - main
      - legacy/*

permissions:
  id-token: write
  packages: write
  pull-requests: write
  contents: write

jobs:
  
  code_testing:
    uses: ptonini/gha-workflows/.github/workflows/code-testing.yaml@main
    if: github.event.action != 'closed' && github.event.head_commit.author.name != 'github-actions[bot]' && !contains(github.event.repository.topics, 'skip-testing')
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  code_linting:
    uses: ptonini/gha-workflows/.github/workflows/code-linting.yaml@main
    if: github.event_name == 'pull_request' && contains('opened synchronize', github.event.action) && !contains(github.event.repository.topics, 'skip-linting')
  security_scan:
    uses: ptonini/gha-workflows/.github/workflows/trufflehog.yaml@main
    if: github.event_name == 'pull_request' && contains('opened synchronize', github.event.action)
  release_please:
    uses: ptonini/gha-workflows/.github/workflows/release-please.yaml@main
    if: github.event_name == 'push'
  
  build_candidate:
    uses: ptonini/gha-workflows/.github/workflows/publish-docker-image.yaml@main
    if:  github.event_name == 'pull_request' && contains('opened synchronize', github.event.action)
    with:
      repository: ${{ format('{0}/{1}', vars.container_registry, github.event.repository.name ) }}
      tags: ${{ format('latest pr{0} pr{0}-{1}', github.event.number, github.run_number) }}
    secrets:
      BUILD_ARGUMENTS: |
        BUILD_USERNAME=${{ github.actor }}
        BUILD_PASSWORD=${{ secrets.GH_PACKAGES_TOKEN }}
  deploy_staging:
    uses: ptonini/gha-workflows/.github/workflows/deploy-helm-releases.yaml@main
    if: (!contains(github.event.repository.topics, 'skip-staging'))
    needs:
      - build_candidate
    with:
      environment: ${{ vars.staging_environment }}
      namespace: ${{ format('{0}-{1}', github.event.repository.name, github.event.number) }}
      digest: ${{ needs.build_candidate.outputs.digest }}
      vault_k8s_role_path: ${{ vars.vault_k8s_staging_role_path }}
      vault_github_token_path: ${{ vars.vault_github_token_path }}
    secrets:
      OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}
  performance_testing:
    uses: ptonini/gha-workflows/.github/workflows/performance-testing.yaml@main
    needs:
      - deploy_staging
    with:
      hosts: ${{ needs.deploy_staging.outputs.hostnames }}
  
  destroy_staging:
    uses: ptonini/gha-workflows/.github/workflows/destroy-staging.yaml@main
    if:  github.event_name == 'pull_request' && github.event.action == 'closed' && !contains(github.event.repository.topics, 'skip-staging')
    with:
      namespace: ${{ format('{0}-{1}', github.event.repository.name, github.event.number) }}
      vault_k8s_role_path: ${{ vars.vault_k8s_staging_role_path }}
    secrets:
      OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}
  
  approve_image:
    uses: ptonini/gha-workflows/.github/workflows/approve-image.yaml@main
    if: github.event.pull_request.merged
    with:
      repository: ${{ format('{0}/{1}', vars.container_registry, github.event.repository.name ) }}
      approved_tag: ${{ format('pr{0}', github.event.number) }}
  
  promote_image:
    uses: ptonini/gha-workflows/.github/workflows/promote-image.yaml@main
    if: github.event_name == 'push' && contains(github.event.commits.*.author.name, 'github-actions[bot]')
    with:
      repository: ${{ format('{0}/{1}', vars.container_registry, github.event.repository.name ) }}
  read_manifests:
    uses: ptonini/gha-workflows/.github/workflows/start.yaml@main
    if: (!startsWith(github.event.pull_request.head.ref, 'release-please--'))
    needs:
      - promote_image
    with:
      vault_k8s_role_paths: ${{ vars.vault_k8s_role_paths }}
  deploy_image:
    uses: ptonini/gha-workflows/.github/workflows/deploy-helm-releases.yaml@main
    needs:
      - read_manifests
    with:
      vault_k8s_role_path: ${{ needs.read_manifests.outputs.vault_k8s_role_path }}
    secrets:
      OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}