name: deploy

concurrency:
  group: ${{ github.event_name }}

on:
  push:
    branches:
      - master
      - main
      - legacy/*
    paths-ignore:
      - manifest.yaml
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      - master
      - main
      - legacy/*

permissions:
  id-token: write
  packages: write
  pull-request: write
  contents: read

jobs:
  release_please:
    uses: ptonini/gha-workflows/.github/workflows/release-please.yaml@main
    if: github.event_name == 'push'
  
  start:
    uses: ptonini/gha-workflows/.github/workflows/start.yaml@main
    if: (!contains(github.event.pull_request.head.ref, 'release-please--'))
    secrets:
      VAULT_K8S_ROLE_PATHS: ${{ secrets.VAULT_K8S_ROLE_PATHS }}
  
  publish_candidate:
    uses: ptonini/gha-workflows/.github/workflows/publish-docker-image.yaml@main
    if: needs.start.outputs.publish_candidate == 'true'
    needs:
      - start
    with:
      tags: ${{ format('latest pr{0}', github.event.number) }}
    secrets:
      BUILD_PASSWORD: ${{ secrets.GH_PACKAGES_TOKEN }}
  create_staging:
    uses: ptonini/gha-workflows/.github/workflows/deploy-helm-releases.yaml@main
    if: needs.start.outputs.create_staging == 'true'
    needs:
      - start
      - publish_candidate
    with:
      checksum: ${{ needs.publish_candidate.outputs.checksum }}
    secrets:
      ORG_DOMAIN: ${{ secrets.ORG_DOMAIN }}
      OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}

  destroy_staging:
    uses: ptonini/gha-workflows/.github/workflows/destroy-staging.yaml@main
    if: needs.start.outputs.destroy_staging == 'true'
    needs:
      - start
    secrets: inherit
   
  publish_frontend:
    uses: ptonini/gha-workflows/.github/workflows/publish-frontend.yaml@main
    if: needs.release_please.outputs.release_created == 'true'
    needs:
      - start
      - release_please
    with:
      tag_name: ${{ needs.release_please.outputs.tag_name }}
  deploy_frontend:
    uses: ptonini/gha-workflows/.github/workflows/deploy-frontend.yaml@main
    needs:
      - publish_frontend
      - release_please
    with:
      tag_name: ${{ needs.release_please.outputs.tag_name }}
    secrets: inherit
  
  quality_scan:
    uses: ptonini/gha-workflows/.github/workflows/code-testing.yaml@main
    if: needs.start.outputs.skip_tests == 'false'
    needs:
      - start
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  code_linting:
    uses: ptonini/gha-workflows/.github/workflows/code-linting.yaml@main
    if: needs.start.outputs.housekeeping == 'true'
    needs:
      - start
  security_leaks_scan:
    uses: ptonini/gha-workflows/.github/workflows/trufflehog.yaml@main
    if: needs.start.outputs.housekeeping == 'true'
    needs:
      - start