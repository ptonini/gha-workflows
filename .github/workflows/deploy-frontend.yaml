name: deploy-frontend

on:
  workflow_call:
    inputs:
      tag_name:
        description: ''
        required: true
        type: string
      vault_method:
        description: ''
        default: jwt
        required: false
        type: string
      vault_path:
        description: ''
        default: oidc/github
        required: false
        type: string
      vault_role:
        description: ''
        default: workflow
        required: false
        type: string
    secrets:
      OPENVPN_CONFIG:
        description: ''
        required: true
      VAULT_ADDR:
        description: ''
        required: true

        
jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
    steps:
      - run: env | sort
      - uses: actions/checkout@v3
      - uses: ptonini/gha-load-metadata@master
      - uses: ptonini/gha-openvpn@master
        with:
          openvpn_config: ${{ secrets.openvpn_config }}
      - uses: hashicorp/vault-action@v2.4.2
        with:
          method: ${{ inputs.vault_method }}
          path: ${{ inputs.vault_path }}
          role: ${{ inputs.vault_role }}
          url: ${{ secrets.VAULT_ADDR }}
          secrets: |
            ${{ env.VAULT_AWS_ROLE_PATH }} access_key | AWS_ACCESS_KEY_ID;
            ${{ env.VAULT_AWS_ROLE_PATH }} secret_key | AWS_SECRET_ACCESS_KEY;
            ${{ env.VAULT_AWS_ROLE_PATH }} security_token | AWS_SESSION_TOKEN;
      - uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: tags/${{ inputs.tag_name }}
          file: ${{ env.ARTIFACT_FILENAME }}
          target: ./${{ env.ARTIFACT_FILENAME }}
      - run: tar xzvf ${ARTIFACT_FILENAME}
      - run: aws s3 sync --delete --acl public-read build "s3://${BUCKET}/www"
      - run: |
          for I in $(jq -c '.[]' <<< "${CUSTOM_TYPES}"); do
            OBJECT=$(jq -r '.object' <<< "${I}")
            aws s3api put-object --bucket ${BUCKET} --key www/${OBJECT} --body build/${OBJECT} --content-type $(jq -r '."content-type"' <<< "${I}") --acl public-read
          done
      - run: aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"