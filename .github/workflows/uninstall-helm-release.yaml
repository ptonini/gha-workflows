name: uninstall-helm-release

on:
  workflow_call:
    inputs:
      vault_k8s_role_path:
        description: ''
        required: true
        type: string
      aws_role:
        description: ''
        required: false
        type: string
      aws_eks_cluster:
        description: ''
        required: false
        type: string
    secrets:
      OPENVPN_CONFIG:
        description: ''
        required: true

jobs:
  uninstall_helm_release:
    runs-on: ubuntu-latest
    steps:
      - run: env | sort
      - run: cat ${GITHUB_EVENT_PATH}
      - uses: ptonini/gha-openvpn@main
        with:
          openvpn_config: ${{ secrets.OPENVPN_CONFIG }}
          validation_addr: ${{ vars.ovpn_validation_addr }}

      - uses: hashicorp/vault-action@v2
        if: vars.workflow_auth_mode == 'vault'
        with:
          url: ${{ vars.vault_addr }}
          method: ${{ vars.vault_method }}
          path: ${{ vars.vault_path }}
          role: ${{ vars.vault_role }}
          secrets: |
            ${{ vars.vault_github_token_path }} token | GH_TOKEN;
            ${{ inputs.vault_k8s_role_path }} kube_config | KUBECONFIG_CONTENT;
      - run: echo "${KUBECONFIG_CONTENT}" > ${KUBECONFIG} && chmod 0600 ${KUBECONFIG}
        if: vars.workflow_auth_mode == 'vault'

      - uses: aws-actions/configure-aws-credentials@v4
        if: vars.workflow_auth_mode == 'aws'
        with:
          role-to-assume: ${{ inputs.aws_role }}
          aws-region: ${{ vars.aws_region }}
      - run: aws eks update-kubeconfig --region ${{ vars.aws_region }} --name ${{ vars.aws_eks_cluster }}
        if: vars.workflow_auth_mode == 'aws'

      - uses: azure/login@v1
        if: vars.workflow_auth_mode == 'azure'
        with:
          client-id: ${{ vars.azure_client_id }}
          tenant-id: ${{ vars.azure_tenant_id }}
          subscription-id: ${{ vars.azure_subscription_id }}
      - uses: azure/aks-set-context@v3
        if: vars.workflow_auth_mode == 'azure'
        with:
          admin: true
          resource-group: ${{ vars.azure_resource_group }}
          cluster-name: ${{ vars.azure_aks_cluster }}

      - run: kubectl get svc

      - uses: ptonini/gha-create-helm-release-files@main
        id: releases
        with:
          container_registry: ${{ vars.container_registry }}
          manifest_file: ${{ vars.manifest_file }}
          rp_manifest_file: ${{ vars.rp_manifest_file }}
          staging_domain: ${{ vars.staging_domain }}
      - uses: ptonini/gha-uninstall-helm-releases@main
        with:
          releases: ${{ steps.releases.outputs.releases }}
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}