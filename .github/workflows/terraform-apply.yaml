name: terraform-apply

on:
  workflow_call:
    secrets:
      GCS_BACKEND_ENCRYPTION_KEY:
        description: ''
        required: true
      OPENVPN_CONFIG:
        description: ''
        required: true

jobs:
  terraform_apply:
    runs-on: ubuntu-latest
    env:
      VAULT_ADDR: ${{ vars.vault_addr }}
    steps:
      - run: env | sort
      - run: cat ${GITHUB_EVENT_PATH}
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ vars.terraform_version }}

      # Connect to VPN
      - uses: ptonini/gha-openvpn@main
        with:
          openvpn_config: ${{ secrets.OPENVPN_CONFIG }}
          validation_addr: ${{ vars.vault_addr }}

      # Fetch github token and backend credentials from Vault
      - uses: hashicorp/vault-action@v2
        with:
          url: ${{ vars.vault_addr }}
          method: ${{ vars.vault_method }}
          path: ${{ vars.vault_path }}
          role: ${{ vars.vault_role }}
          exportToken: true
          secrets: |
            ${{ vars.vault_github_token_path }} token | GH_TOKEN;
            ${{ vars.vault_gcp_roleset_path }} token | GCS_ACCESS_TOKEN;

      # Fetch approved plan
      - uses: ptonini/gha-get-labels@main
        with:
          labels: planned_run_id
      - uses: dawidd6/action-download-artifact@v2
        with:
          name: plan
          run_id: ${{ env.PLANNED_RUN_ID }}
          github_token: ${{ env.GH_TOKEN }}

      # Initialize terraform and apply plan
      - run: terraform init -input=false -backend-config="access_token=${GCS_ACCESS_TOKEN}" -backend-config="encryption_key=${{ secrets.GCS_BACKEND_ENCRYPTION_KEY }}"
      - run: terraform apply -auto-approve -input=false ${{ vars.terraform_plan_filename }}
        id: apply
        env:
          VAULT_ADDR: ${{ vars.vault_addr }}