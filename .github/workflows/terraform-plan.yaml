name: terraform-plan

on:
  workflow_call:
    secrets:
      OPENVPN_CONFIG:
        description: ''
        required: true
      OPENSTACK_CONFIG:
        description: ''
        required: false
      GH_TOKEN:
        description: ''
        required: true

jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ env.GH_TOKEN }}
    steps:
      - run: env | sort
      - run: cat ${GITHUB_EVENT_PATH}
      - uses: actions/checkout@v3

      # Configure terraform
      - uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ vars.terraform_version }}

      # Connect to VPN
      - uses: ptonini/gha-openvpn@main
        with:
          openvpn_config: ${{ secrets.OPENVPN_CONFIG }}
          validation_addr: ${{ vars.ovpn_validation_addr }}

      # Connect to providers
      - uses: ptonini/gha-cloud-login@main
        with:
          aws_region: ${{ vars.aws_region }}
          aws_role: ${{ vars.aws_role }}
          azure_tenant_id: ${{ vars.azure_tenant_id }}
          azure_subscription_id: ${{ vars.azure_subscription_id }}
          azure_client_id: ${{ vars.azure_client_id }}
          openstack_config: ${{ secrets.OPENSTACK_CONFIG }}

      # Initialize terraform
      - run: terraform init -input=false
      - run: echo ${{ vars.tfvars }} > terraform.tfvars.json

      # Create plan
      - run: terraform plan -out=${{ vars.terraform_plan_filename }} -no-color -input=false -detailed-exitcode
        id: plan
        continue-on-error: true

      # Generate resumed plan view
      - run: terraform show -no-color ${{ vars.terraform_plan_filename }}
        id: show
        if: hashFiles(vars.terraform_plan_filename)

      # Save outputs to step summary and pr comments
      - run: echo '```${{ steps.show.outputs.stdout }}${{ steps.plan.outputs.stderr }}```' >> $GITHUB_STEP_SUMMARY
      - uses: thollander/actions-comment-pull-request@v2
        with:
          message: '```${{ steps.show.outputs.stdout }}${{ steps.plan.outputs.stderr }}```'
          comment_tag: plan_output

      # Upload plan to artifact and set labels
      - uses: actions/upload-artifact@v3
        if: steps.plan.outputs.exitcode == '2'
        with:
          name: plan
          path: ${{ vars.terraform_plan_filename }}
          retention-days: 1
      - uses: ptonini/gha-set-labels@main
        if: steps.plan.outputs.exitcode == '2'
        with:
          overwrite: true
          github_token: ${{ env.GH_TOKEN }}
          labels: | 
            plan_created
            plan_run_id: ${{ github.run_id }}

      # Break job if plan failed
      - run: exit 1
        if: steps.plan.outputs.exitcode == '1'