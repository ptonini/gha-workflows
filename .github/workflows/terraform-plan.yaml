name: terraform-plan

on:
  workflow_call:
    secrets:
      GCS_BACKEND_ENCRYPTION_KEY:
        description: ''
        required: true
      OPENVPN_CONFIG:
        description: ''
        required: true

jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    steps:
      - run: env | sort
      - run: cat ${GITHUB_EVENT_PATH}
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ vars.terraform_version }}

      # Connect to VPN
      - uses: ptonini/gha-openvpn@main
        with:
          openvpn_config: ${{ secrets.OPENVPN_CONFIG }}
          validation_addr: ${{ vars.vault_addr }}

      # Fetch github token and backend credentials from Vault
      - uses: hashicorp/vault-action@v2
        with:
          url: ${{ vars.vault_addr }}
          method: ${{ vars.vault_method }}
          path: ${{ vars.vault_path }}
          role: ${{ vars.vault_role }}
          exportToken: true
          secrets: |
            ${{ vars.vault_github_token_path }} token | GH_TOKEN;
            ${{ vars.vault_gcp_roleset_path }} token | GCS_ACCESS_TOKEN;

      # Initialize terraform and create plan
      - run: terraform init -input=false -backend-config="access_token=${GCS_ACCESS_TOKEN}" -backend-config="encryption_key=${{ secrets.GCS_BACKEND_ENCRYPTION_KEY }}"
      - run: terraform plan -out=${{ vars.terraform_plan_filename }} -no-color -input=false -detailed-exitcode
        id: plan
        continue-on-error: true
        env:
          VAULT_ADDR: ${{ vars.vault_addr }}

      # Generate resumed plan view
      - run: terraform show -no-color ${{ vars.terraform_plan_filename }}
        id: show
        if: hashFiles(vars.terraform_plan_filename)

      # Save outputs to step summary and pr comments
      - run: echo '```${{ steps.show.outputs.stdout }}${{ steps.plan.outputs.stderr }}```' >> $GITHUB_STEP_SUMMARY
      - uses: thollander/actions-comment-pull-request@v2
        with:
          message: '```${{ steps.show.outputs.stdout }}${{ steps.plan.outputs.stderr }}```'
          comment_tag: plan_output

      # Upload plan to artifact and set labels
      - uses: actions/upload-artifact@v3
        if: steps.plan.outputs.exitcode == '2'
        with:
          name: plan
          path: ${{ vars.terraform_plan_filename }}
          retention-days: 1
      - uses: ptonini/gha-set-labels@main
        if: steps.plan.outputs.exitcode == '2'
        with:
          overwrite: true
          github_token: ${{ env.GH_TOKEN }}
          labels: | 
            planned
            planned_run_id: ${{ github.run_id }}
      - run: exit 1
        if: steps.plan.outputs.exitcode == '1'