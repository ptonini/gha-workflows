name: startup

on:
  workflow_call:
    secrets:
      VAULT_K8S_ROLE_PATHS:
        description: ''
        required: false
      ORG_APPS:
        description: ''
        required: false
    outputs:
      vault_k8s_role_path:
        description: ''
        value: ${{ jobs.startup.outputs.vault_k8s_role_path }}
      release_name:
        description: ''
        value: ${{ jobs.startup.outputs.release_name }}
      release_version:
        description: ''
        value: ${{ jobs.startup.outputs.release_version }}
      skip_tests:
        description: ''
        value: ${{ jobs.startup.outputs.skip_tests }}
      publish_candidate:
        description: ''
        value: ${{ jobs.startup.outputs.publish_candidate }}
      approve_candidate:
        description: ''
        value: ${{ jobs.startup.outputs.approve_candidate }}
      promote_candidate:
        description: ''
        value: ${{ jobs.startup.outputs.promote_candidate }}
      housekeeping:
        description: ''
        value: ${{ jobs.startup.outputs.housekeeping }}
      create_staging:
        description: ''
        value: ${{ jobs.startup.outputs.create_staging }}
      destroy_staging:
        description: ''
        value: ${{ jobs.startup.outputs.destroy_staging }}
      docker_repository:
        description: ''
        value: ${{ jobs.startup.outputs.docker_repository }}

jobs:
  startup:
    runs-on: ubuntu-latest
    outputs:
      vault_k8s_role_path: ${{ steps.get_metadata.outputs.vault_k8s_role_path }}
      release_name: ${{ steps.get_metadata.outputs.release_name }}
      release_version: ${{ steps.get_metadata.outputs.release_version }}
      skip_tests: ${{ steps.get_metadata.outputs.skip_tests }}
      housekeeping: ${{ steps.get_metadata.outputs.housekeeping }}
      publish_candidate: ${{ steps.get_metadata.outputs.publish_candidate }}
      approve_candidate: ${{ steps.get_metadata.outputs.approve_candidate }}
      promote_candidate: ${{ steps.get_metadata.outputs.promote_candidate }}
      create_staging: ${{ steps.get_metadata.outputs.create_staging }}
      destroy_staging: ${{ steps.get_metadata.outputs.destroy_staging }}
      docker_repository: ${{ steps.get_metadata.outputs.docker_repository }}
    steps:
      - run: env | sort
      - uses: actions/checkout@v3
      - uses: ptonini/gha-get-metadata@main
        id: get_metadata
        with:
          vault_k8s_role_paths: ${{ secrets.VAULT_K8S_ROLE_PATHS }}
          org_apps: ${{ secrets.ORG_APPS }}